import gspread
from google.oauth2.service_account import Credentials
from vnstock import Vnstock
from datetime import datetime, time
import pytz

# ====== 1. KI·ªÇM TRA TH·ªúI GIAN TH·ªä TR∆Ø·ªúNG ======
def is_market_open():
    """Ki·ªÉm tra xem th·ªã tr∆∞·ªùng ch·ª©ng kho√°n Vi·ªát Nam c√≥ ƒëang m·ªü c·ª≠a kh√¥ng"""
    # L·∫•y th·ªùi gian hi·ªán t·∫°i ·ªü m√∫i gi·ªù Vi·ªát Nam
    vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
    now = datetime.now(vn_tz)
    
    # Th·ªùi gian m·ªü c·ª≠a: 9:00 - 15:00 (gi·ªù Vi·ªát Nam)
    market_open = time(9, 0)
    market_close = time(15, 0)
    
    # Ki·ªÉm tra xem c√≥ ph·∫£i ng√†y l√†m vi·ªác kh√¥ng (th·ª© 2-6)
    is_weekday = now.weekday() < 5  # 0=Monday, 4=Friday
    
    # Ki·ªÉm tra th·ªùi gian
    is_time_ok = market_open <= now.time() <= market_close
    
    return is_weekday and is_time_ok

# ====== 2. L·∫§Y GI√Å REALTIME ======
def get_realtime_price(vs, ticker_clean):
    """L·∫•y gi√° realtime c·ªßa m√£ c·ªï phi·∫øu"""
    import time
    
    try:
        # Th√™m delay ƒë·ªÉ tr√°nh b·ªã block
        time.sleep(0.5)
        
        # S·ª≠ d·ª•ng stock method v·ªõi timeout
        stock_data = vs.stock(symbol=ticker_clean)
        quote_dict = vars(stock_data.quote)
        
        # Debug: In ra t·∫•t c·∫£ c√°c key c√≥ s·∫µn (ch·ªâ cho 3 m√£ ƒë·∫ßu ti√™n)
        if ticker_clean in ['GEG', 'NVL', 'DCM']:
            print(f"üîç Debug {ticker_clean}: C√°c key c√≥ s·∫µn: {list(quote_dict.keys())}")
        
        # Th·ª≠ truy c·∫≠p tr·ª±c ti·∫øp v√†o data_source ƒë·ªÉ l·∫•y d·ªØ li·ªáu g·∫ßn nh·∫•t
        try:
            if hasattr(stock_data.quote, 'data_source') and stock_data.quote.data_source is not None:
                # L·∫•y d·ªØ li·ªáu g·∫ßn nh·∫•t (c√≥ th·ªÉ l√† realtime)
                from datetime import datetime, timedelta
                start_date = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
                historical_data = stock_data.quote.data_source.history(start_date)
                
                if historical_data is not None and len(historical_data) > 0:
                    latest_data = historical_data.iloc[-1]
                    
                    # Ki·ªÉm tra xem d·ªØ li·ªáu c√≥ ph·∫£i l√† h√¥m nay kh√¥ng
                    trading_date = latest_data.get('time', '')
                    today = datetime.now().strftime('%Y-%m-%d')
                    
                    # Ki·ªÉm tra th·ªùi gian hi·ªán t·∫°i ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i d·ªØ li·ªáu
                    vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
                    now = datetime.now(vn_tz)
                    current_time = now.time()
                    
                    # Ki·ªÉm tra xem c√≥ ph·∫£i ng√†y h√¥m nay kh√¥ng (ch·ªâ so s√°nh ph·∫ßn ng√†y)
                    trading_date_only = str(trading_date).split(' ')[0] if trading_date else ''
                    
                    # Ki·ªÉm tra xem c√≥ ph·∫£i ng√†y h√¥m nay kh√¥ng
                    if trading_date_only == today:
                        # Ki·ªÉm tra th·ªã tr∆∞·ªùng c√≥ ƒëang m·ªü kh√¥ng
                        if 9 <= current_time.hour < 15:
                            if 'lastPrice' in latest_data and latest_data['lastPrice'] is not None:
                                return latest_data['lastPrice'], "realtime (today lastPrice - market open)"
                            elif 'close' in latest_data and latest_data['close'] is not None:
                                return latest_data['close'], "realtime (today close - market open)"
                        else:
                            if 'lastPrice' in latest_data and latest_data['lastPrice'] is not None:
                                return latest_data['lastPrice'], "realtime (today close - market closed)"
                            elif 'close' in latest_data and latest_data['close'] is not None:
                                return latest_data['close'], "realtime (today close - market closed)"
                    else:
                        if 'lastPrice' in latest_data and latest_data['lastPrice'] is not None:
                            return latest_data['lastPrice'], "realtime (latest lastPrice)"
                        elif 'close' in latest_data and latest_data['close'] is not None:
                            return latest_data['close'], "realtime (latest close)"
        except Exception as hist_error:
            if ticker_clean in ['GEG', 'NVL', 'DCM']:
                print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ data_source cho {ticker_clean}: {hist_error}")
        
        # Th·ª≠ c√°c key kh√°c trong quote_dict
        price = None
        price_source = "unknown"
        
        for key in ['lastPrice', 'close', 'price', 'currentPrice', 'last_price']:
            if key in quote_dict and quote_dict[key] is not None:
                price = quote_dict[key]
                price_source = key
                break
        
        if price is not None:
            return price, f"realtime ({price_source})"
        else:
            return "N/A", "kh√¥ng c√≥ d·ªØ li·ªáu realtime"
            
    except Exception as e:
        return "L·ªói", f"L·ªói realtime: {e}"

# ====== 3. L·∫§Y GI√Å ƒê√ìNG C·ª¨A ======
def get_closing_price(vs, ticker_clean):
    """L·∫•y gi√° ƒë√≥ng c·ª≠a g·∫ßn nh·∫•t c·ªßa m√£ c·ªï phi·∫øu"""
    try:
        stock_data = vs.stock(symbol=ticker_clean)
        
        # L·∫•y d·ªØ li·ªáu 7 ng√†y g·∫ßn nh·∫•t
        from datetime import datetime, timedelta
        start_date = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
        historical_data = stock_data.quote.data_source.history(start_date)
        
        if historical_data is not None and len(historical_data) > 0:
            # L·∫•y gi√° ƒë√≥ng c·ª≠a c·ªßa ng√†y giao d·ªãch g·∫ßn nh·∫•t
            latest_data = historical_data.iloc[-1]  # L·∫•y d√≤ng cu·ªëi c√πng
            close_price = latest_data.get('close', 'N/A')
            trading_date = latest_data.get('time', 'N/A')
            return close_price, f"ƒë√≥ng c·ª≠a ({trading_date})"
        else:
            return "N/A", "kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠"
    except Exception as e:
        return "L·ªói", f"L·ªói ƒë√≥ng c·ª≠a: {e}"

# ====== 4. HI·ªÇN TH·ªä MENU L·ª∞A CH·ªåN ======
def show_menu():
    """Hi·ªÉn th·ªã menu l·ª±a ch·ªçn ch·∫ø ƒë·ªô l·∫•y d·ªØ li·ªáu"""
    print("\n" + "="*60)
    print("üìä CH·ªåN CH·∫æ ƒê·ªò L·∫§Y D·ªÆ LI·ªÜU C·ªî PHI·∫æU VI·ªÜT NAM")
    print("="*60)
    print()
    print("1Ô∏è‚É£  REALTIME - Gi√° th·ªùi gian th·ª±c")
    print("    ‚úÖ ∆Øu ƒëi·ªÉm: D·ªØ li·ªáu m·ªõi nh·∫•t, ch√≠nh x√°c")
    print("    ‚ö†Ô∏è  H·∫°n ch·∫ø: Ch·ªâ ho·∫°t ƒë·ªông khi th·ªã tr∆∞·ªùng m·ªü (9:00-15:00, Th·ª© 2-6)")
    print("    üí° Ph√π h·ª£p: Theo d√µi gi√° trong gi·ªù giao d·ªãch")
    print()
    print("2Ô∏è‚É£  ƒê√ìNG C·ª¨A - Gi√° ƒë√≥ng c·ª≠a g·∫ßn nh·∫•t")
    print("    ‚úÖ ∆Øu ƒëi·ªÉm: Ho·∫°t ƒë·ªông 24/7, d·ªØ li·ªáu ·ªïn ƒë·ªãnh")
    print("    üìÖ D·ªØ li·ªáu: Gi√° ƒë√≥ng c·ª≠a c·ªßa ng√†y giao d·ªãch g·∫ßn nh·∫•t")
    print("    üí° Ph√π h·ª£p: Ph√¢n t√≠ch d√†i h·∫°n, b√°o c√°o cu·ªëi ng√†y")
    print()
    print("3Ô∏è‚É£  AUTO - T·ª± ƒë·ªông ch·ªçn th√¥ng minh")
    print("    ü§ñ T·ª± ƒë·ªông: Th·ªã tr∆∞·ªùng m·ªü ‚Üí REALTIME, Th·ªã tr∆∞·ªùng ƒë√≥ng ‚Üí ƒê√ìNG C·ª¨A")
    print("    ‚úÖ ∆Øu ƒëi·ªÉm: T·ªëi ∆∞u nh·∫•t, kh√¥ng c·∫ßn suy nghƒ©")
    print("    üí° Ph√π h·ª£p: S·ª≠ d·ª•ng h√†ng ng√†y, t·ª± ƒë·ªông h√≥a")
    print()
    print("4Ô∏è‚É£  M√É RI√äNG - C·∫≠p nh·∫≠t 1 m√£ c·ªï phi·∫øu c·ª• th·ªÉ")
    print("    üéØ T√≠nh nƒÉng: Nh·∫≠p m√£ c·ªï phi·∫øu (VD: VCB, HPG, VNM...)")
    print("    ‚úÖ ∆Øu ƒëi·ªÉm: Nhanh ch√≥ng, ch·ªâ c·∫ßn 1 m√£")
    print("    üí° Ph√π h·ª£p: Ki·ªÉm tra nhanh, test th·ª≠ nghi·ªám")
    print()
    print("5Ô∏è‚É£  V√íNG L·∫∂P - T·ª± ƒë·ªông c·∫≠p nh·∫≠t ƒë·ªãnh k·ª≥")
    print("    üîÑ T√≠nh nƒÉng: Ch·∫°y li√™n t·ª•c v·ªõi kho·∫£ng th·ªùi gian t√πy ch·ªçn")
    print("    ‚è∞ T√πy ch·ªçn: 1, 5, 15, 30 ph√∫t ho·∫∑c t√πy ch·ªânh")
    print("    üí° Ph√π h·ª£p: Theo d√µi gi√° li√™n t·ª•c, t·ª± ƒë·ªông h√≥a ho√†n to√†n")
    print()
    print("="*60)
    print("üí° GHI CH√ö:")
    print("   ‚Ä¢ Th·ªã tr∆∞·ªùng VN m·ªü c·ª≠a: 9:00-15:00 (Th·ª© 2-6)")
    print("   ‚Ä¢ Ngo√†i gi·ªù giao d·ªãch: Ch·ªçn l·ª±a ch·ªçn 2 ho·∫∑c 3")
    print("   ‚Ä¢ L·∫ßn ƒë·∫ßu s·ª≠ d·ª•ng: Khuy·∫øn ngh·ªã ch·ªçn 3 (AUTO)")
    print("   ‚Ä¢ M√£ c·ªï phi·∫øu: Nh·∫≠p m√£ 3 k√Ω t·ª± (VD: VCB, HPG, VNM)")
    print("   ‚Ä¢ V√≤ng l·∫∑p: Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng")
    print("="*60)
    
    while True:
        choice = input("\nüéØ Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n (1/2/3/4/5): ").strip()
        if choice in ['1', '2', '3', '4', '5']:
            return choice
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p 1, 2, 3, 4 ho·∫∑c 5.")
            print("üí° G·ª£i √Ω: Nh·∫≠p '3' ƒë·ªÉ s·ª≠ d·ª•ng ch·∫ø ƒë·ªô t·ª± ƒë·ªông th√¥ng minh!")

# ====== 5. L·∫§Y M√É C·ªî PHI·∫æU RI√äNG ======
def get_single_ticker():
    """L·∫•y m√£ c·ªï phi·∫øu t·ª´ ng∆∞·ªùi d√πng"""
    print("\n" + "="*50)
    print("üéØ NH·∫¨P M√É C·ªî PHI·∫æU C·∫¶N C·∫¨P NH·∫¨T")
    print("="*50)
    print("üí° V√≠ d·ª•: VCB, HPG, VNM, FPT, MSN, VIC...")
    print("üí° L∆∞u √Ω: Nh·∫≠p m√£ 3 k√Ω t·ª±, kh√¥ng c·∫ßn d·∫•u c√°ch")
    print("="*50)
    
    while True:
        ticker = input("\nüìà Nh·∫≠p m√£ c·ªï phi·∫øu: ").strip().upper()
        if len(ticker) >= 2 and len(ticker) <= 5:  # Ki·ªÉm tra ƒë·ªô d√†i h·ª£p l√Ω
            return ticker
        else:
            print("‚ùå M√£ c·ªï phi·∫øu kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p m√£ 2-5 k√Ω t·ª±.")
            print("üí° V√≠ d·ª•: VCB, HPG, VNM, FPT...")

# ====== 6. C·∫§U H√åNH V√íNG L·∫∂P ======
def get_loop_config():
    """L·∫•y c·∫•u h√¨nh v√≤ng l·∫∑p t·ª´ ng∆∞·ªùi d√πng"""
    print("\n" + "="*50)
    print("üîÑ C·∫§U H√åNH V√íNG L·∫∂P T·ª∞ ƒê·ªòNG")
    print("="*50)
    print("‚è∞ Ch·ªçn kho·∫£ng th·ªùi gian gi·ªØa c√°c l·∫ßn c·∫≠p nh·∫≠t:")
    print("   1Ô∏è‚É£  1 ph√∫t  - C·∫≠p nh·∫≠t r·∫•t nhanh")
    print("   2Ô∏è‚É£  5 ph√∫t  - C·∫≠p nh·∫≠t nhanh (khuy·∫øn ngh·ªã)")
    print("   3Ô∏è‚É£  15 ph√∫t - C·∫≠p nh·∫≠t v·ª´a ph·∫£i")
    print("   4Ô∏è‚É£  30 ph√∫t - C·∫≠p nh·∫≠t ch·∫≠m")
    print("   5Ô∏è‚É£  T√πy ch·ªânh - Nh·∫≠p s·ªë ph√∫t t√πy √Ω")
    print("="*50)
    
    while True:
        interval_choice = input("\n‚è∞ Ch·ªçn kho·∫£ng th·ªùi gian (1/2/3/4/5): ").strip()
        if interval_choice == '1':
            return 1
        elif interval_choice == '2':
            return 5
        elif interval_choice == '3':
            return 15
        elif interval_choice == '4':
            return 30
        elif interval_choice == '5':
            while True:
                try:
                    custom_minutes = int(input("‚è∞ Nh·∫≠p s·ªë ph√∫t: "))
                    if 1 <= custom_minutes <= 1440:  # T·ªëi ƒëa 24 gi·ªù
                        return custom_minutes
                    else:
                        print("‚ùå Vui l√≤ng nh·∫≠p s·ªë t·ª´ 1-1440 ph√∫t.")
                except ValueError:
                    print("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.")
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p 1, 2, 3, 4 ho·∫∑c 5.")

# ====== 7. CH·∫†Y V√íNG L·∫∂P ======
def run_loop_mode(worksheet, vs, interval_minutes):
    """Ch·∫°y ch·∫ø ƒë·ªô v√≤ng l·∫∑p"""
    import time
    from datetime import datetime, timedelta
    
    print(f"\nüîÑ B·∫ÆT ƒê·∫¶U CH·∫æ ƒê·ªò V√íNG L·∫∂P")
    print(f"‚è∞ Kho·∫£ng th·ªùi gian: {interval_minutes} ph√∫t")
    print(f"üí° Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng v√≤ng l·∫∑p")
    print("="*60)
    
    loop_count = 0
    
    try:
        while True:
            loop_count += 1
            vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
            now = datetime.now(vn_tz)
            
            print(f"\nüîÑ L·∫¶N C·∫¨P NH·∫¨T TH·ª® {loop_count}")
            print(f"üïê Th·ªùi gian: {now.strftime('%H:%M:%S %d/%m/%Y')}")
            print("-" * 40)
            
            # X√°c ƒë·ªãnh ch·∫ø ƒë·ªô d·ª±a tr√™n th·ªùi gian th·ªã tr∆∞·ªùng
            if is_market_open():
                mode = "realtime"
                print("ü§ñ Th·ªã tr∆∞·ªùng ƒëang m·ªü ‚Üí S·ª≠ d·ª•ng REALTIME")
            else:
                mode = "closing"
                print("ü§ñ Th·ªã tr∆∞·ªùng ƒë√≥ng c·ª≠a ‚Üí S·ª≠ d·ª•ng ƒê√ìNG C·ª¨A")
            
            # L·∫•y danh s√°ch m√£ c·ªï phi·∫øu
            tickers = worksheet.col_values(3)[1:]
            print(f"üîç C·∫≠p nh·∫≠t {len(tickers)} m√£ c·ªï phi·∫øu...")
            
            # L·∫•y gi√° v√† c·∫≠p nh·∫≠t
            prices_to_update = []
            success_count = 0
            
            for ticker in tickers:
                if not ticker:
                    prices_to_update.append([""])
                    continue
                
                ticker_clean = str(ticker).strip().upper()
                
                if mode == "realtime":
                    price, info = get_realtime_price(vs, ticker_clean)
                else:
                    price, info = get_closing_price(vs, ticker_clean)
                
                prices_to_update.append([price])
                if price not in ['N/A', 'L·ªói', '']:
                    success_count += 1
                
                print(f"  - {ticker_clean}: {price} ({info})")
            
            # C·∫≠p nh·∫≠t Google Sheets
            try:
                range_to_update = f"H2:H{len(prices_to_update) + 1}"
                worksheet.update(values=prices_to_update, range_name=range_to_update)
                print(f"\n‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng {success_count}/{len(tickers)} m√£!")
            except Exception as e:
                print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t Google Sheets: {e}")
            
            # Th·ªëng k√™
            success_rate = (success_count / len(tickers)) * 100 if tickers else 0
            print(f"üìä T·ª∑ l·ªá th√†nh c√¥ng: {success_rate:.1f}%")
            
            # T√≠nh th·ªùi gian ch·ªù ti·∫øp theo
            next_update = now + timedelta(minutes=interval_minutes)
            print(f"‚è∞ L·∫ßn c·∫≠p nh·∫≠t ti·∫øp theo: {next_update.strftime('%H:%M:%S')}")
            print("=" * 60)
            
            # Ch·ªù ƒë·∫øn l·∫ßn c·∫≠p nh·∫≠t ti·∫øp theo
            if loop_count < 999999:  # Tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n
                print(f"‚è≥ ƒêang ch·ªù {interval_minutes} ph√∫t... (Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng)")
                time.sleep(interval_minutes * 60)
            else:
                print("üõë ƒê√£ ƒë·∫°t gi·ªõi h·∫°n v√≤ng l·∫∑p. D·ª´ng ch∆∞∆°ng tr√¨nh.")
                break
                
    except KeyboardInterrupt:
        print(f"\nüõë ƒê√É D·ª™NG V√íNG L·∫∂P")
        print(f"üìä T·ªïng s·ªë l·∫ßn c·∫≠p nh·∫≠t: {loop_count}")
        print("üëã T·∫°m bi·ªát!")
    except Exception as e:
        print(f"\n‚ùå L·ªói trong v√≤ng l·∫∑p: {e}")
        print("üîÑ Th·ª≠ l·∫°i sau 1 ph√∫t...")
        time.sleep(60)
        run_loop_mode(worksheet, vs, interval_minutes)

# ====== 5. K·∫æT N·ªêI GOOGLE SHEETS ======
SCOPES = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
KEY_FILE = "create-462716-fb36b6cea72a.json"
SHEET_URL = "https://docs.google.com/spreadsheets/d/1xuU1VzRtZtVlNE_GLzebROre4I5ZvwLnU3qGskY10BQ/edit?usp=sharing"

try:
    creds = Credentials.from_service_account_file(KEY_FILE, scopes=SCOPES)
    client = gspread.authorize(creds)
    spreadsheet = client.open_by_url(SHEET_URL)
    worksheet = spreadsheet.worksheet("Data_CP")
    print("‚úÖ K·∫øt n·ªëi Google Sheets th√†nh c√¥ng!")
except FileNotFoundError:
    print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file '{KEY_FILE}'.")
    exit()
except Exception as e:
    print(f"‚ùå L·ªói khi k·∫øt n·ªëi Google Sheets: {e}")
    exit()

# ====== 6. HI·ªÇN TH·ªä MENU V√Ä L·∫§Y L·ª∞A CH·ªåN ======
choice = show_menu()

# ====== 7. X√ÅC ƒê·ªäNH CH·∫æ ƒê·ªò HO·∫†T ƒê·ªòNG ======
if choice == '3':  # AUTO mode
    if is_market_open():
        mode = "realtime"
        print("ü§ñ Ch·∫ø ƒë·ªô AUTO: Th·ªã tr∆∞·ªùng ƒëang m·ªü ‚Üí S·ª≠ d·ª•ng REALTIME")
    else:
        mode = "closing"
        vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
        now = datetime.now(vn_tz)
        print(f"ü§ñ Ch·∫ø ƒë·ªô AUTO: Th·ªã tr∆∞·ªùng ƒë√≥ng c·ª≠a ‚Üí S·ª≠ d·ª•ng ƒê√ìNG C·ª¨A")
        print(f"   Th·ªùi gian hi·ªán t·∫°i: {now.strftime('%H:%M:%S %d/%m/%Y')}")
elif choice == '1':  # REALTIME mode
    mode = "realtime"
    if not is_market_open():
        vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
        now = datetime.now(vn_tz)
        print(f"‚ö†Ô∏è  C·∫£nh b√°o: Th·ªã tr∆∞·ªùng ƒëang ƒë√≥ng c·ª≠a!")
        print(f"   Th·ªùi gian hi·ªán t·∫°i: {now.strftime('%H:%M:%S %d/%m/%Y')}")
        print(f"   Th·ªã tr∆∞·ªùng m·ªü c·ª≠a: 9:00 - 15:00 (Th·ª© 2-6)")
        print("   D·ªØ li·ªáu realtime c√≥ th·ªÉ kh√¥ng c√≥ s·∫µn.")
elif choice == '4':  # SINGLE TICKER mode
    # X√°c ƒë·ªãnh ch·∫ø ƒë·ªô cho m√£ ri√™ng (s·ª≠ d·ª•ng AUTO logic)
    if is_market_open():
        mode = "realtime"
        print("üéØ Ch·∫ø ƒë·ªô M√É RI√äNG: Th·ªã tr∆∞·ªùng ƒëang m·ªü ‚Üí S·ª≠ d·ª•ng REALTIME")
    else:
        mode = "closing"
        vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
        now = datetime.now(vn_tz)
        print(f"üéØ Ch·∫ø ƒë·ªô M√É RI√äNG: Th·ªã tr∆∞·ªùng ƒë√≥ng c·ª≠a ‚Üí S·ª≠ d·ª•ng ƒê√ìNG C·ª¨A")
        print(f"   Th·ªùi gian hi·ªán t·∫°i: {now.strftime('%H:%M:%S %d/%m/%Y')}")
    
    # L·∫•y m√£ c·ªï phi·∫øu t·ª´ ng∆∞·ªùi d√πng
    single_ticker = get_single_ticker()
    print(f"üéØ ƒê√£ ch·ªçn m√£: {single_ticker}")
elif choice == '5':  # LOOP mode
    # Ch·∫ø ƒë·ªô v√≤ng l·∫∑p s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ri√™ng
    pass
else:  # CLOSING mode
    mode = "closing"
    print("üìà Ch·∫ø ƒë·ªô ƒê√ìNG C·ª¨A: L·∫•y gi√° ƒë√≥ng c·ª≠a g·∫ßn nh·∫•t")

print()

# ====== 8. X·ª¨ L√ù CH·∫æ ƒê·ªò V√íNG L·∫∂P ======
if choice == '5':  # LOOP mode
    # Kh·ªüi t·∫°o vnstock
    vs = Vnstock()
    # L·∫•y c·∫•u h√¨nh v√≤ng l·∫∑p v√† ch·∫°y
    interval_minutes = get_loop_config()
    run_loop_mode(worksheet, vs, interval_minutes)
    exit()  # Tho√°t sau khi ch·∫°y xong v√≤ng l·∫∑p

# ====== 9. L·∫§Y DANH S√ÅCH M√É C·ªî PHI·∫æU T·ª™ C·ªòT C ======
if choice == '4':  # SINGLE TICKER mode
    tickers = [single_ticker]  # Ch·ªâ x·ª≠ l√Ω 1 m√£
    print(f"üéØ C·∫≠p nh·∫≠t m√£ c·ªï phi·∫øu: {single_ticker}")
else:
    tickers = worksheet.col_values(3)[1:]
    print(f"üîç ƒê√£ t√¨m th·∫•y {len(tickers)} m√£ c·ªï phi·∫øu ƒë·ªÉ c·∫≠p nh·∫≠t.")

# ====== 10. L·∫§Y GI√Å M·ªöI V√Ä T·ªîNG H·ª¢P V√ÄO M·ªòT LIST ======
vs = Vnstock()
prices_to_update = []
print("‚è≥ ƒêang l·∫•y d·ªØ li·ªáu gi√° c·ªï phi·∫øu...")

for ticker in tickers:
    if not ticker:
        prices_to_update.append([""])
        continue

    ticker_clean = str(ticker).strip().upper()
    
    if mode == "realtime":
        price, info = get_realtime_price(vs, ticker_clean)
        prices_to_update.append([price])
        print(f"  - {ticker_clean}: {price} ({info})")
    else:  # closing mode
        price, info = get_closing_price(vs, ticker_clean)
        prices_to_update.append([price])
        print(f"  - {ticker_clean}: {price} ({info})")

# ====== 11. C·∫¨P NH·∫¨T GOOGLE SHEETS ======
if prices_to_update:
    try:
        if choice == '4':  # SINGLE TICKER mode
            # T√¨m v·ªã tr√≠ c·ªßa m√£ trong c·ªôt C v√† c·∫≠p nh·∫≠t c·ªôt H t∆∞∆°ng ·ª©ng
            all_tickers = worksheet.col_values(3)
            try:
                ticker_index = all_tickers.index(single_ticker) + 1  # +1 v√¨ index b·∫Øt ƒë·∫ßu t·ª´ 0
                cell_address = f"H{ticker_index}"
                worksheet.update(values=[[prices_to_update[0][0]]], range_name=cell_address)  # Use named arguments
                print(f"\n‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng m√£ {single_ticker} v√†o √¥ {cell_address}!")
            except ValueError:
                print(f"\n‚ö†Ô∏è  M√£ {single_ticker} kh√¥ng t√¨m th·∫•y trong Google Sheets.")
                print("üí° M√£ s·∫Ω ƒë∆∞·ª£c th√™m v√†o cu·ªëi danh s√°ch.")
                # Th√™m v√†o cu·ªëi danh s√°ch
                worksheet.append_row([single_ticker, "", "", "", "", "", "", prices_to_update[0][0]])
                print(f"‚úÖ ƒê√£ th√™m m√£ {single_ticker} v√†o cu·ªëi danh s√°ch!")
        else:
            # C·∫≠p nh·∫≠t to√†n b·ªô c·ªôt H nh∆∞ c≈©
            range_to_update = f"H2:H{len(prices_to_update) + 1}"
            worksheet.update(values=prices_to_update, range_name=range_to_update)
            print(f"\n‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng {len(prices_to_update)} m√£ v√†o c·ªôt H!")
        
        # Th√¥ng b√°o th√™m v·ªÅ th·ªùi gian v√† ch·∫ø ƒë·ªô
        vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
        now = datetime.now(vn_tz)
        mode_text = "REALTIME" if mode == "realtime" else "ƒê√ìNG C·ª¨A"
        print(f"üïê Th·ªùi gian c·∫≠p nh·∫≠t: {now.strftime('%H:%M:%S %d/%m/%Y')}")
        print(f"üìä Ch·∫ø ƒë·ªô s·ª≠ d·ª•ng: {mode_text}")
        
    except Exception as e:
        print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t Google Sheets: {e}")