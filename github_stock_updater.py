import gspread
from google.oauth2.service_account import Credentials
import vnstock
from datetime import datetime, time, timedelta
import pytz
import os
import json
import time as time_module

# ====== C·∫§U H√åNH GITHUB ACTIONS ======
SHEET_URL = "https://docs.google.com/spreadsheets/d/1xuU1VzRtZtVlNE_GLzebROre4I5ZvwLnU3qGskY10BQ/edit?usp=sharing"
SCOPES = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]

# ====== 1. KI·ªÇM TRA TH·ªúI GIAN TH·ªä TR∆Ø·ªúNG ======
def is_market_open():
    """Ki·ªÉm tra xem th·ªã tr∆∞·ªùng ch·ª©ng kho√°n Vi·ªát Nam c√≥ ƒëang m·ªü c·ª≠a kh√¥ng"""
    vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
    now = datetime.now(vn_tz)
    
    # Th·ªùi gian m·ªü c·ª≠a: 9:00 - 15:00 (gi·ªù Vi·ªát Nam)
    market_open = time(9, 0)
    market_close = time(15, 0)
    
    # Ki·ªÉm tra xem c√≥ ph·∫£i ng√†y l√†m vi·ªác kh√¥ng (th·ª© 2-6)
    is_weekday = now.weekday() < 5  # 0=Monday, 4=Friday
    
    # Ki·ªÉm tra th·ªùi gian
    is_time_ok = market_open <= now.time() <= market_close
    
    return is_weekday and is_time_ok

# ====== 2. L·∫§Y GI√Å REALTIME ======
def get_realtime_price(ticker_clean):
    """L·∫•y gi√° realtime c·ªßa m√£ c·ªï phi·∫øu"""
    try:
        # S·ª≠ d·ª•ng API m·ªõi c·ªßa vnstock
        stock_data = vnstock.stock_intraday_data(symbol=ticker_clean, page_size=1)
        if stock_data is not None and len(stock_data) > 0:
            last_price = stock_data.iloc[0]['close']
            return last_price, "realtime"
        else:
            return "N/A", "kh√¥ng c√≥ d·ªØ li·ªáu realtime"
    except Exception as e:
        return "L·ªói", f"L·ªói realtime: {e}"

# ====== 3. L·∫§Y GI√Å ƒê√ìNG C·ª¨A ======
def get_closing_price(ticker_clean):
    """L·∫•y gi√° ƒë√≥ng c·ª≠a g·∫ßn nh·∫•t c·ªßa m√£ c·ªï phi·∫øu"""
    try:
        # S·ª≠ d·ª•ng API m·ªõi c·ªßa vnstock
        from datetime import datetime, timedelta
        start_date = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
        end_date = datetime.now().strftime('%Y-%m-%d')
        
        stock_data = vnstock.stock_historical_data(symbol=ticker_clean, start_date=start_date, end_date=end_date)
        
        if stock_data is not None and len(stock_data) > 0:
            # L·∫•y gi√° ƒë√≥ng c·ª≠a c·ªßa ng√†y giao d·ªãch g·∫ßn nh·∫•t
            latest_data = stock_data.iloc[-1]  # L·∫•y d√≤ng cu·ªëi c√πng
            close_price = latest_data['close']
            trading_date = latest_data['time']
            return close_price, f"ƒë√≥ng c·ª≠a ({trading_date})"
        else:
            return "N/A", "kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠"
    except Exception as e:
        return "L·ªói", f"L·ªói ƒë√≥ng c·ª≠a: {e}"

# ====== 4. K·∫æT N·ªêI GOOGLE SHEETS ======
def connect_google_sheets():
    """K·∫øt n·ªëi ƒë·∫øn Google Sheets s·ª≠ d·ª•ng credentials t·ª´ bi·∫øn m√¥i tr∆∞·ªùng"""
    try:
        # L·∫•y credentials t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
        credentials_json = os.getenv('GOOGLE_CREDENTIALS_JSON')
        if not credentials_json:
            # Th·ª≠ ƒë·ªçc t·ª´ file n·∫øu kh√¥ng c√≥ bi·∫øn m√¥i tr∆∞·ªùng
            if os.path.exists('google_credentials.json'):
                with open('google_credentials.json', 'r') as f:
                    credentials_json = f.read()
            else:
                print("‚ùå Kh√¥ng t√¨m th·∫•y Google credentials. Vui l√≤ng c·∫•u h√¨nh GOOGLE_CREDENTIALS_JSON.")
                return None
        
        # Parse JSON credentials
        credentials_dict = json.loads(credentials_json)
        
        # T·∫°o credentials t·ª´ JSON
        creds = Credentials.from_service_account_info(credentials_dict, scopes=SCOPES)
        client = gspread.authorize(creds)
        spreadsheet = client.open_by_url(SHEET_URL)
        worksheet = spreadsheet.worksheet("Data_CP")
        print("‚úÖ K·∫øt n·ªëi Google Sheets th√†nh c√¥ng!")
        return worksheet
    except Exception as e:
        print(f"‚ùå L·ªói khi k·∫øt n·ªëi Google Sheets: {e}")
        return None

# ====== 5. C·∫¨P NH·∫¨T GI√Å C·ªî PHI·∫æU ======
def update_stock_prices(worksheet):
    """C·∫≠p nh·∫≠t gi√° c·ªï phi·∫øu v√†o Google Sheets"""
    try:
        # L·∫•y danh s√°ch m√£ c·ªï phi·∫øu t·ª´ c·ªôt C
        tickers = worksheet.col_values(3)[1:]  # B·ªè qua header
        print(f"üîç T√¨m th·∫•y {len(tickers)} m√£ c·ªï phi·∫øu ƒë·ªÉ c·∫≠p nh·∫≠t.")
        
        # X√°c ƒë·ªãnh ch·∫ø ƒë·ªô d·ª±a tr√™n th·ªùi gian th·ªã tr∆∞·ªùng
        if is_market_open():
            mode = "realtime"
            print("ü§ñ Th·ªã tr∆∞·ªùng ƒëang m·ªü ‚Üí S·ª≠ d·ª•ng REALTIME")
        else:
            mode = "closing"
            print("ü§ñ Th·ªã tr∆∞·ªùng ƒë√≥ng c·ª≠a ‚Üí S·ª≠ d·ª•ng ƒê√ìNG C·ª¨A")
        
        # L·∫•y gi√° v√† c·∫≠p nh·∫≠t
        prices_to_update = []
        success_count = 0
        
        for ticker in tickers:
            if not ticker:
                prices_to_update.append([""])
                continue
            
            ticker_clean = str(ticker).strip().upper()
            
            if mode == "realtime":
                price, info = get_realtime_price(ticker_clean)
            else:
                price, info = get_closing_price(ticker_clean)
            
            prices_to_update.append([price])
            if price not in ['N/A', 'L·ªói', '']:
                success_count += 1
            
            print(f"  - {ticker_clean}: {price} ({info})")
        
        # C·∫≠p nh·∫≠t Google Sheets
        if prices_to_update:
            range_to_update = f"H2:H{len(prices_to_update) + 1}"
            worksheet.update(values=prices_to_update, range_name=range_to_update)
            print(f"\n‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng {success_count}/{len(tickers)} m√£!")
            
            # Th·ªëng k√™
            success_rate = (success_count / len(tickers)) * 100 if tickers else 0
            print(f"üìä T·ª∑ l·ªá th√†nh c√¥ng: {success_rate:.1f}%")
            
            # Th√¥ng b√°o th·ªùi gian
            vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
            now = datetime.now(vn_tz)
            mode_text = "REALTIME" if mode == "realtime" else "ƒê√ìNG C·ª¨A"
            print(f"üïê Th·ªùi gian c·∫≠p nh·∫≠t: {now.strftime('%H:%M:%S %d/%m/%Y')}")
            print(f"üìä Ch·∫ø ƒë·ªô s·ª≠ d·ª•ng: {mode_text}")
            
            return True
        else:
            print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t.")
            return False
            
    except Exception as e:
        print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t gi√° c·ªï phi·∫øu: {e}")
        return False

# ====== 6. H√ÄM CH√çNH CH·∫†Y AUTO C·∫¨P NH·∫¨T ======
def run_auto_update():
    """Ch·∫°y auto c·∫≠p nh·∫≠t v·ªõi interval 1 ph√∫t"""
    print("üöÄ B·∫ÆT ƒê·∫¶U AUTO C·∫¨P NH·∫¨T GI√Å C·ªî PHI·∫æU")
    print("‚è∞ Kho·∫£ng th·ªùi gian: 1 ph√∫t")
    print("üîÑ Ch·∫ø ƒë·ªô: Auto (Realtime khi th·ªã tr∆∞·ªùng m·ªü, ƒê√≥ng c·ª≠a khi th·ªã tr∆∞·ªùng ƒë√≥ng)")
    print("="*60)
    
    # K·∫øt n·ªëi Google Sheets
    worksheet = connect_google_sheets()
    if not worksheet:
        print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Google Sheets. Tho√°t ch∆∞∆°ng tr√¨nh.")
        return
    
    loop_count = 0
    max_loops = 1440  # T·ªëi ƒëa 24 gi·ªù (1440 ph√∫t)
    
    try:
        while loop_count < max_loops:
            loop_count += 1
            vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
            now = datetime.now(vn_tz)
            
            print(f"\nüîÑ L·∫¶N C·∫¨P NH·∫¨T TH·ª® {loop_count}")
            print(f"üïê Th·ªùi gian: {now.strftime('%H:%M:%S %d/%m/%Y')}")
            print("-" * 40)
            
            # C·∫≠p nh·∫≠t gi√° c·ªï phi·∫øu
            success = update_stock_prices(worksheet)
            
            if not success:
                print("‚ö†Ô∏è C·∫≠p nh·∫≠t kh√¥ng th√†nh c√¥ng, th·ª≠ l·∫°i sau...")
            
            print("=" * 60)
            
            # T√≠nh th·ªùi gian ch·ªù ti·∫øp theo
            next_update = now + timedelta(minutes=1)
            print(f"‚è∞ L·∫ßn c·∫≠p nh·∫≠t ti·∫øp theo: {next_update.strftime('%H:%M:%S')}")
            
            # Ch·ªù 1 ph√∫t tr∆∞·ªõc khi c·∫≠p nh·∫≠t ti·∫øp
            if loop_count < max_loops:
                print("‚è≥ ƒêang ch·ªù 1 ph√∫t...")
                time_module.sleep(60)  # Ch·ªù 60 gi√¢y
            else:
                print("üõë ƒê√£ ƒë·∫°t gi·ªõi h·∫°n v√≤ng l·∫∑p (24 gi·ªù). D·ª´ng ch∆∞∆°ng tr√¨nh.")
                break
                
    except KeyboardInterrupt:
        print(f"\nüõë ƒê√É D·ª™NG AUTO C·∫¨P NH·∫¨T")
        print(f"üìä T·ªïng s·ªë l·∫ßn c·∫≠p nh·∫≠t: {loop_count}")
    except Exception as e:
        print(f"\n‚ùå L·ªói trong auto c·∫≠p nh·∫≠t: {e}")
        print("üîÑ Th·ª≠ l·∫°i sau 1 ph√∫t...")
        time_module.sleep(60)
        run_auto_update()

# ====== 7. H√ÄM CH√çNH ======
if __name__ == "__main__":
    print("üìä GITHUB ACTIONS STOCK PRICE UPDATER")
    print("üîÑ Auto c·∫≠p nh·∫≠t gi√° c·ªï phi·∫øu Vi·ªát Nam m·ªói 1 ph√∫t")
    print("="*60)
    
    # Ch·∫°y auto c·∫≠p nh·∫≠t
    run_auto_update()
