import gspread
from google.oauth2.service_account import Credentials
import vnstock
from datetime import datetime, time, timedelta
import pytz
import os
import json
import time as time_module
import numpy as np

# ====== C·∫§U H√åNH GITHUB ACTIONS ======
SHEET_URL = "https://docs.google.com/spreadsheets/d/1xuU1VzRtZtVlNE_GLzebROre4I5ZvwLnU3qGskY10BQ/edit?usp=sharing"
SCOPES = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]

# Cache cho Google Sheets client
_worksheet_cache = None

# Bi·∫øn ƒë·ªÉ theo d√µi l·ªói li√™n t·ª•c
_error_count = 0
_max_errors = 5  # S·ªë l·ªói t·ªëi ƒëa tr∆∞·ªõc khi restart

# Bi·∫øn ƒë·ªÉ theo d√µi th·ªùi gian ch·∫°y (GitHub Actions timeout: 6 gi·ªù = 360 ph√∫t)
_start_time = None
_max_runtime_minutes = 350  # Restart tr∆∞·ªõc 6 gi·ªù ƒë·ªÉ tr√°nh timeout

# Bi·∫øn ƒë·ªÉ theo d√µi restart count
_restart_count = 0
_max_restarts = float('inf')  # V√¥ h·∫°n restart - ch·ªâ d·ª´ng khi cancel th·ªß c√¥ng

def load_restart_count():
    """Load restart count t·ª´ file"""
    global _restart_count
    try:
        if os.path.exists('restart_count.txt'):
            with open('restart_count.txt', 'r') as f:
                _restart_count = int(f.read().strip())
        else:
            _restart_count = 0
    except:
        _restart_count = 0

def save_restart_count():
    """L∆∞u restart count v√†o file"""
    try:
        with open('restart_count.txt', 'w') as f:
            f.write(str(_restart_count))
    except:
        pass

# ====== 1. KI·ªÇM TRA TH·ªúI GIAN TH·ªä TR∆Ø·ªúNG ======
def is_market_open():
    """Ki·ªÉm tra xem th·ªã tr∆∞·ªùng ch·ª©ng kho√°n Vi·ªát Nam c√≥ ƒëang m·ªü c·ª≠a kh√¥ng"""
    vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
    now = datetime.now(vn_tz)
    
    # Th·ªùi gian m·ªü c·ª≠a: 9:00 - 15:00 (gi·ªù Vi·ªát Nam)
    market_open = time(9, 0)
    market_close = time(15, 0)
    
    # Ki·ªÉm tra xem c√≥ ph·∫£i ng√†y l√†m vi·ªác kh√¥ng (th·ª© 2-6)
    is_weekday = now.weekday() < 5  # 0=Monday, 4=Friday
    
    # Ki·ªÉm tra th·ªùi gian
    is_time_ok = market_open <= now.time() <= market_close
    
    return is_weekday and is_time_ok

# ====== 2. L·∫§Y GI√Å REALTIME ======
def get_realtime_price(ticker_clean):
    """L·∫•y gi√° realtime c·ªßa m√£ c·ªï phi·∫øu"""
    try:
        # S·ª≠ d·ª•ng API m·ªõi c·ªßa vnstock v·ªõi timeout ng·∫Øn
        import requests
        from requests.adapters import HTTPAdapter
        from urllib3.util.retry import Retry
        
        # T·∫°o session v·ªõi timeout ng·∫Øn
        session = requests.Session()
        retry = Retry(connect=1, backoff_factor=0.1)
        adapter = HTTPAdapter(max_retries=retry)
        session.mount('http://', adapter)
        session.mount('https://', adapter)
        
        # S·ª≠ d·ª•ng API m·ªõi c·ªßa vnstock
        stock_data = vnstock.stock_intraday_data(symbol=ticker_clean, page_size=1)
        if stock_data is not None and len(stock_data) > 0:
            last_price = stock_data.iloc[0]['close']
            # Chuy·ªÉn ƒë·ªïi numpy types th√†nh Python native types
            if isinstance(last_price, (np.integer, np.floating)):
                last_price = float(last_price)
            # Chia cho 1000 ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng ƒë∆°n v·ªã (VND)
            if isinstance(last_price, (int, float)) and last_price > 1000:
                last_price = last_price / 1000
            return last_price, "realtime"
        else:
            return "N/A", "kh√¥ng c√≥ d·ªØ li·ªáu realtime"
    except Exception as e:
        return "L·ªói", f"L·ªói realtime: {e}"

# ====== 3. L·∫§Y GI√Å ƒê√ìNG C·ª¨A ======
def get_closing_price(ticker_clean):
    """L·∫•y gi√° ƒë√≥ng c·ª≠a g·∫ßn nh·∫•t c·ªßa m√£ c·ªï phi·∫øu"""
    try:
        # S·ª≠ d·ª•ng API m·ªõi c·ªßa vnstock
        from datetime import datetime, timedelta
        start_date = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
        end_date = datetime.now().strftime('%Y-%m-%d')
        
        stock_data = vnstock.stock_historical_data(symbol=ticker_clean, start_date=start_date, end_date=end_date)
        
        if stock_data is not None and len(stock_data) > 0:
            # L·∫•y gi√° ƒë√≥ng c·ª≠a c·ªßa ng√†y giao d·ªãch g·∫ßn nh·∫•t
            latest_data = stock_data.iloc[-1]  # L·∫•y d√≤ng cu·ªëi c√πng
            close_price = latest_data['close']
            trading_date = latest_data['time']
            
            # Chuy·ªÉn ƒë·ªïi numpy types th√†nh Python native types
            if isinstance(close_price, (np.integer, np.floating)):
                close_price = float(close_price)
            if isinstance(trading_date, np.datetime64):
                trading_date = str(trading_date)
            
            # Chia cho 1000 ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng ƒë∆°n v·ªã (VND)
            if isinstance(close_price, (int, float)) and close_price > 1000:
                close_price = close_price / 1000
            
            return close_price, f"ƒë√≥ng c·ª≠a ({trading_date})"
        else:
            return "N/A", "kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠"
    except Exception as e:
        return "L·ªói", f"L·ªói ƒë√≥ng c·ª≠a: {e}"

# ====== 4. K·∫æT N·ªêI GOOGLE SHEETS ======
def connect_google_sheets():
    """K·∫øt n·ªëi ƒë·∫øn Google Sheets s·ª≠ d·ª•ng credentials t·ª´ bi·∫øn m√¥i tr∆∞·ªùng"""
    global _worksheet_cache
    
    # S·ª≠ d·ª•ng cache n·∫øu ƒë√£ c√≥
    if _worksheet_cache is not None:
        return _worksheet_cache
    
    try:
        # L·∫•y credentials t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
        credentials_json = os.getenv('GOOGLE_CREDENTIALS_JSON')
        if not credentials_json:
            # Th·ª≠ ƒë·ªçc t·ª´ file n·∫øu kh√¥ng c√≥ bi·∫øn m√¥i tr∆∞·ªùng
            if os.path.exists('google_credentials.json'):
                with open('google_credentials.json', 'r') as f:
                    credentials_json = f.read()
            else:
                print("‚ùå Kh√¥ng t√¨m th·∫•y Google credentials. Vui l√≤ng c·∫•u h√¨nh GOOGLE_CREDENTIALS_JSON.")
                return None
        
        # Parse JSON credentials
        credentials_dict = json.loads(credentials_json)
        
        # T·∫°o credentials t·ª´ JSON
        creds = Credentials.from_service_account_info(credentials_dict, scopes=SCOPES)
        client = gspread.authorize(creds)
        
        # Thi·∫øt l·∫≠p timeout cho Google Sheets API
        client.timeout = 30  # 30 gi√¢y timeout
        
        spreadsheet = client.open_by_url(SHEET_URL)
        worksheet = spreadsheet.worksheet("Data_CP")
        
        # Cache worksheet ƒë·ªÉ t√°i s·ª≠ d·ª•ng
        _worksheet_cache = worksheet
        
        print("‚úÖ K·∫øt n·ªëi Google Sheets th√†nh c√¥ng!")
        return worksheet
    except Exception as e:
        print(f"‚ùå L·ªói khi k·∫øt n·ªëi Google Sheets: {e}")
        return None

# ====== 5. C·∫¨P NH·∫¨T GI√Å C·ªî PHI·∫æU ======
def update_stock_prices(worksheet):
    """C·∫≠p nh·∫≠t gi√° c·ªï phi·∫øu v√†o Google Sheets"""
    try:
        # L·∫•y danh s√°ch m√£ c·ªï phi·∫øu t·ª´ c·ªôt C
        tickers = worksheet.col_values(3)[1:]  # B·ªè qua header
        print(f"üîç T√¨m th·∫•y {len(tickers)} m√£ c·ªï phi·∫øu ƒë·ªÉ c·∫≠p nh·∫≠t.")
        
        # X√°c ƒë·ªãnh ch·∫ø ƒë·ªô d·ª±a tr√™n th·ªùi gian th·ªã tr∆∞·ªùng
        if is_market_open():
            mode = "realtime"
            print("ü§ñ Th·ªã tr∆∞·ªùng ƒëang m·ªü ‚Üí S·ª≠ d·ª•ng REALTIME")
        else:
            mode = "closing"
            print("ü§ñ Th·ªã tr∆∞·ªùng ƒë√≥ng c·ª≠a ‚Üí S·ª≠ d·ª•ng ƒê√ìNG C·ª¨A")
        
        # L·∫•y gi√° v√† c·∫≠p nh·∫≠t
        prices_to_update = []
        success_count = 0
        
        # T·ªëi ∆∞u h√≥a: x·ª≠ l√Ω batch ƒë·ªÉ gi·∫£m th·ªùi gian
        batch_size = 10  # X·ª≠ l√Ω 10 m√£ m·ªôt l·∫ßn
        for i in range(0, len(tickers), batch_size):
            batch_tickers = tickers[i:i+batch_size]
            
            for ticker in batch_tickers:
                if not ticker:
                    prices_to_update.append([""])
                    continue
                
                ticker_clean = str(ticker).strip().upper()
                
                if mode == "realtime":
                    price, info = get_realtime_price(ticker_clean)
                else:
                    price, info = get_closing_price(ticker_clean)
                
                # ƒê·∫£m b·∫£o gi√° tr·ªã l√† string ho·∫∑c number, kh√¥ng ph·∫£i numpy types
                if isinstance(price, (np.integer, np.floating)):
                    price = float(price)
                elif price not in ['N/A', 'L·ªói', '']:
                    price = str(price)
                
                prices_to_update.append([price])
                if price not in ['N/A', 'L·ªói', '']:
                    success_count += 1
                
                # Gi·∫£m logging ƒë·ªÉ tƒÉng t·ªëc
                if i % 20 == 0:  # Ch·ªâ log m·ªói 20 m√£
                    print(f"  - {ticker_clean}: {price} ({info})")
        
        # C·∫≠p nh·∫≠t Google Sheets - s·ª≠ d·ª•ng batch update ƒë·ªÉ tƒÉng t·ªëc
        if prices_to_update:
            try:
                # S·ª≠ d·ª•ng batch update ƒë·ªÉ tƒÉng t·ªëc
                range_to_update = f"H2:H{len(prices_to_update) + 1}"
                worksheet.update(values=prices_to_update, range_name=range_to_update)
                print(f"\n‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng {success_count}/{len(tickers)} m√£!")
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói khi c·∫≠p nh·∫≠t Google Sheets: {e}")
                # Th·ª≠ l·∫°i v·ªõi ph∆∞∆°ng ph√°p kh√°c
                try:
                    for i, price in enumerate(prices_to_update, start=2):
                        worksheet.update(f'H{i}', price)
                    print(f"‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng v·ªõi ph∆∞∆°ng ph√°p thay th·∫ø!")
                except Exception as e2:
                    print(f"‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t Google Sheets: {e2}")
                    return False
            
            # Th·ªëng k√™
            success_rate = (success_count / len(tickers)) * 100 if tickers else 0
            print(f"üìä T·ª∑ l·ªá th√†nh c√¥ng: {success_rate:.1f}%")
            
            # Th√¥ng b√°o th·ªùi gian
            vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
            now = datetime.now(vn_tz)
            mode_text = "REALTIME" if mode == "realtime" else "ƒê√ìNG C·ª¨A"
            print(f"üïê Th·ªùi gian c·∫≠p nh·∫≠t: {now.strftime('%H:%M:%S %d/%m/%Y')}")
            print(f"üìä Ch·∫ø ƒë·ªô s·ª≠ d·ª•ng: {mode_text}")
            
            return True
        else:
            print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t.")
            return False
            
    except Exception as e:
        print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t gi√° c·ªï phi·∫øu: {e}")
        return False

# ====== 6. H√ÄM CH√çNH CH·∫†Y AUTO C·∫¨P NH·∫¨T ======
def run_auto_update():
    """Ch·∫°y auto c·∫≠p nh·∫≠t v√¥ th·ªùi h·∫°n cho ƒë·∫øn khi cancel th·ªß c√¥ng"""
    global _start_time, _restart_count
    
    print("üöÄ B·∫ÆT ƒê·∫¶U AUTO C·∫¨P NH·∫¨T GI√Å C·ªî PHI·∫æU")
    print("‚è∞ Ch·∫ø ƒë·ªô: V√¥ th·ªùi h·∫°n (ch·∫°y cho ƒë·∫øn khi cancel th·ªß c√¥ng)")
    print("üîÑ Ch·∫ø ƒë·ªô: Auto (Realtime khi th·ªã tr∆∞·ªùng m·ªü, ƒê√≥ng c·ª≠a khi th·ªã tr∆∞·ªùng ƒë√≥ng)")
    print("‚è±Ô∏è Kho·∫£ng th·ªùi gian: 1 ph√∫t gi·ªØa c√°c l·∫ßn c·∫≠p nh·∫≠t")
    print("üõë ƒê·ªÉ d·ª´ng: Cancel workflow trong GitHub Actions")
    print("‚ö†Ô∏è T·ª± ƒë·ªông restart tr∆∞·ªõc 6 gi·ªù ƒë·ªÉ tr√°nh timeout")
    print("="*60)
    
    # Load restart count
    load_restart_count()
    
    # Ghi l·∫°i th·ªùi gian b·∫Øt ƒë·∫ßu
    _start_time = datetime.now()
    
    print(f"üìä Restart count hi·ªán t·∫°i: {_restart_count} (v√¥ h·∫°n)")
    
    # T√≠nh th·ªùi gian t·ªïng c·ªông ƒë√£ ch·∫°y
    total_runtime_hours = (_restart_count * _max_runtime_minutes) / 60
    if _restart_count > 0:
        print(f"‚è∞ Th·ªùi gian t·ªïng c·ªông ƒë√£ ch·∫°y: {total_runtime_hours:.1f} gi·ªù")
    
    # K·∫øt n·ªëi Google Sheets
    worksheet = connect_google_sheets()
    if not worksheet:
        print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Google Sheets. Tho√°t ch∆∞∆°ng tr√¨nh.")
        return
    
    loop_count = 0
    
    try:
        while True:  # Ch·∫°y v√¥ th·ªùi h·∫°n
            loop_count += 1
            vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
            now = datetime.now(vn_tz)
            
            # Ki·ªÉm tra th·ªùi gian ch·∫°y ƒë·ªÉ tr√°nh timeout
            if _start_time:
                runtime_minutes = (datetime.now() - _start_time).total_seconds() / 60
                if runtime_minutes >= _max_runtime_minutes:
                    _restart_count += 1
                    print(f"\n‚ö†Ô∏è ƒê√£ ch·∫°y ƒë∆∞·ª£c {runtime_minutes:.1f} ph√∫t (g·∫ßn 6 gi·ªù)")
                    print(f"üîÑ T·ª± ƒë·ªông restart #{_restart_count} ƒë·ªÉ tr√°nh GitHub Actions timeout...")
                    print(f"üìä T·ªïng s·ªë l·∫ßn c·∫≠p nh·∫≠t: {loop_count}")
                    print(f"üìä S·ªë l·∫ßn restart: {_restart_count} (v√¥ h·∫°n)")
                    
                    print("üîÑ Kh·ªüi ƒë·ªông l·∫°i workflow...")
                    # L∆∞u restart count tr∆∞·ªõc khi exit
                    save_restart_count()
                    # Trigger restart b·∫±ng c√°ch exit v·ªõi code ƒë·∫∑c bi·ªát
                    os._exit(100)  # Exit code 100 ƒë·ªÉ trigger restart
            
            print(f"\nüîÑ L·∫¶N C·∫¨P NH·∫¨T TH·ª® {loop_count}")
            print(f"üïê Th·ªùi gian: {now.strftime('%H:%M:%S %d/%m/%Y')}")
            print(f"üìä Th·ªùi gian ch·∫°y: {loop_count} ph√∫t")
            if _start_time:
                runtime_minutes = (datetime.now() - _start_time).total_seconds() / 60
                remaining_minutes = _max_runtime_minutes - runtime_minutes
                print(f"‚è∞ Runtime: {runtime_minutes:.1f} ph√∫t / {_max_runtime_minutes} ph√∫t")
                print(f"‚è∞ Th·ªùi gian c√≤n l·∫°i tr∆∞·ªõc restart: {remaining_minutes:.1f} ph√∫t")
            print("-" * 40)
            
            # C·∫≠p nh·∫≠t gi√° c·ªï phi·∫øu
            success = update_stock_prices(worksheet)
            
            if success:
                print("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!")
                _error_count = 0  # Reset error count khi th√†nh c√¥ng
            else:
                print("‚ö†Ô∏è C·∫≠p nh·∫≠t kh√¥ng th√†nh c√¥ng, th·ª≠ l·∫°i sau...")
                _error_count += 1
                print(f"‚ö†Ô∏è L·ªói li√™n t·ª•c: {_error_count}/{_max_errors}")
                
                # Th·ª≠ k·∫øt n·ªëi l·∫°i Google Sheets n·∫øu c·∫ßn
                worksheet = connect_google_sheets()
                if not worksheet:
                    print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi l·∫°i Google Sheets. Th·ª≠ l·∫°i sau...")
                    _error_count += 1
                
                # N·∫øu qu√° nhi·ªÅu l·ªói li√™n t·ª•c, restart
                if _error_count >= _max_errors:
                    print("üîÑ Qu√° nhi·ªÅu l·ªói li√™n t·ª•c. Kh·ªüi ƒë·ªông l·∫°i...")
                    _error_count = 0
                    time_module.sleep(60)  # Ch·ªù 1 ph√∫t tr∆∞·ªõc khi restart
            
            print("=" * 60)
            
            # T√≠nh th·ªùi gian ch·ªù ti·∫øp theo
            next_update = now + timedelta(minutes=1)
            print(f"‚è∞ L·∫ßn c·∫≠p nh·∫≠t ti·∫øp theo: {next_update.strftime('%H:%M:%S')}")
            
            # Ch·ªù 1 ph√∫t tr∆∞·ªõc khi c·∫≠p nh·∫≠t ti·∫øp
            print("‚è≥ ƒêang ch·ªù 1 ph√∫t...")
            time_module.sleep(60)  # Ch·ªù 60 gi√¢y (1 ph√∫t)
                
    except KeyboardInterrupt:
        print(f"\nüõë ƒê√É D·ª™NG AUTO C·∫¨P NH·∫¨T (Cancel th·ªß c√¥ng)")
        print(f"üìä T·ªïng s·ªë l·∫ßn c·∫≠p nh·∫≠t: {loop_count}")
    except Exception as e:
        print(f"\n‚ùå L·ªói trong auto c·∫≠p nh·∫≠t: {e}")
        print(f"üìä ƒê√£ ch·∫°y ƒë∆∞·ª£c {loop_count} l·∫ßn c·∫≠p nh·∫≠t")
        print("üîÑ Th·ª≠ l·∫°i sau 30 gi√¢y...")
        time_module.sleep(30)
        print("üîÑ Kh·ªüi ƒë·ªông l·∫°i auto c·∫≠p nh·∫≠t...")
        run_auto_update()

# ====== 7. H√ÄM CH√çNH ======
if __name__ == "__main__":
    print("üìä GITHUB ACTIONS STOCK PRICE UPDATER")
    print("üîÑ Auto c·∫≠p nh·∫≠t gi√° c·ªï phi·∫øu Vi·ªát Nam li√™n t·ª•c (ch·∫°y cho ƒë·∫øn khi cancel)")
    print("="*60)
    
    # Ch·∫°y auto c·∫≠p nh·∫≠t
    run_auto_update()
